#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

PATH=/usr/local/bin:$PATH
TMPDIR=${TMPDIR:-/tmp}

source $(dirname $0)/common

payload=$(mktemp ${TMPDIR}/artifactory-resource-request.XXXXXX)

cat > $payload <&0

api_key=$(jq -r '.source.api_key // ""' < ${payload})
repository_id=$(jq -r '.source.repository_id // ""' < ${payload})
group_id=$(jq -r '.source.group_id // ""' < ${payload})
artifact_id=$(jq -r '.source.artifact_id // ""' < ${payload})
host=$(jq -r '.source.host // ""' < ${payload})

is_valid 'api_key' "${api_key}"
is_valid 'repository_id' "${repository_id}"
is_valid 'group_id' "${group_id}"
is_valid 'artifact_id' "${artifact_id}"
is_valid 'host' "${host}"

host=$(strip_last_slash "${host}")

group_id_path=$(echo "${group_id}" | sed 's/\./\//g')

aql="items.find(
    {\"repo\": \"${repository_id}\"},
    {\"type\": \"folder\"},
    {\"path\": \"${group_id_path}/${artifact_id}\"}
).include(\"repo\",\"path\",\"name\",\"created\").sort({\"\$desc\" : [\"created\"]})"

version=$(jq -r '.version.ref // ""' < ${payload})

# In CI/CD context you may want to skip the check step
skip_check=$(jq -r '.source.skip_check // "false"' < ${payload})

if [[ -z "${version}" ]] || [ "$skip_check" = "false" ] ; then

  result=$(curl \
    -k \
    -X POST \
    -H "X-JFrog-Art-Api:${api_key}" \
    -H "Content-Type:text/plain" \
    -d "${aql}" \
    --write-out "\n%{http_code}" \
    --silent \
    ${host}/api/search/aql)

  http_code="${result##*$'\n'}"
  req_output=$(echo "${result}" | sed '$d')
fi

if [[ ${http_code} -eq '200'  ]] ; then
  sorted_versions="$(sort-versions --json "$(echo "${req_output}" | jq '[.results[].name]')")"
  total=$(echo "${req_output}" | jq '.range.total')
  if [[ "${total}" == "0" ]]; then
    echo "[]" >&3
  elif [[ -z "${version}" || "false" == $(echo "${sorted_versions}" | jq "contains([\"${version}\"])") ]]; then
    # If the version provided by Concourse is empty or for any reason doesn't exists in artifactory, return the latest version.
    echo "${sorted_versions}" | jq "[{ref: last}]" >&3
  else
    echo "${sorted_versions}" | jq ".[.|to_entries|.[]|select(.value == \"${version}\").key:]|map({ref:.})" >&3
  fi
  exit 0
elif [ "$skip_check" = "false" ] ; then
  # The list may be empty, if there are no versions available at the source.
  # If the given version is already the latest, an array with that version as the sole entry should be listed.
  echo "[{ref: \"$version\"}]" >&3
else
  echo "Unable to retreive versions in artifactory" >&2
  echo "Request: curl -k -X POST -H "X-JFrog-Art-Api:${api_key}" -H "Content-Type:text/plain" -d "${aql}" --write-out "\n%{http_code}" --silent ${host}/api/search/aql" >&2
  echo "Error:${req_output}" >&2
  exit 1
fi