#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

PATH=/usr/local/bin:$PATH
TMPDIR=${TMPDIR:-/tmp}

source $(dirname $0)/common
source $(dirname $0)/package_artefact_util

destination=${1}

if [ -z "${destination}" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

cd ${destination}

payload=$(mktemp ${TMPDIR}/artifactory-resource-request.XXXXXX)

cat > $payload <&0

# source
host=$(jq -r '.source.host // ""' < ${payload})
api_key=$(jq -r '.source.api_key // ""' < ${payload})
repository_id=$(jq -r '.source.repository_id // ""' < ${payload})
group_id=$(jq -r '.source.group_id // ""' < ${payload})
artifact_id=$(jq -r '.source.artifact_id // ""' < ${payload})

# params
path_param=$(jq -r '.params.path // ""' < ${payload})
build_publish=$(jq -r '.params.build_publish // empty' < ${payload})
package_artifact=$(jq -r '.params.package_artifact // empty' < ${payload})

is_valid 'host' "${host}"
is_valid 'api_key' "${api_key}"
is_valid 'repository_id' "${repository_id}"
is_valid 'group_id' "${group_id}"
is_valid 'artifact_id' "${artifact_id}"

host=$(strip_last_slash "${host}")
path_param=$(strip_last_slash "${path_param}")

folder_exists "${destination}/${path_param}"

version=$(get_version "${payload}" "${destination}")
group_id_path=$(echo "${group_id}" | sed 's/\./\//g')
files=$(find "${destination}/${path_param}" -type f -not -path "${destination}/${path_param}/.git/*" -not -name "version" -not -name "build" -not -name "_remote.repositories" -not -name "config.yaml")
metadata_files='[]'

### is_file_complies_with_artifact_specs and/or package_artifact

if [ -n "${package_artifact}" ]; then
  echo_packaging_rules "$package_artifact"
fi

for abs_file in $files; do
  file=$(basename "${abs_file}")
  if [ -n "${package_artifact}" ]; then
    package_artefact "$file" "$artifact_id" "$version" "${destination}/${path_param}"
  fi
  is_file_complies_with_artifact_specs "${artifact_id}" "${version}" "${file}"
  metadata_files=$(echo "${metadata_files}" | jq ". + [\"${file}\"]")
done

jfrog rt c artifactory-server --url="$host" --apikey="$api_key" --interactive=false

## Upload artifact without/without build-info

if [[ -z "${build_publish}" ]]; then

  echo "Upload artifact without build-info"

  # Upload artifact without build-info
  pushd "${destination}/${path_param}"
    jfrog rt upload "*" "$repository_id/$group_id_path/$artifact_id/$version/" --flat=false  --exclude-patterns="version;build;_remote.repositories"
  popd

else

  echo "Collecting Build Information see: https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-CollectingBuildInformation"

  # build-publish params
  build_name=$(jq -r '.build_name // empty' <<< ${build_publish})
  build_number_file=$(jq -r '.build_number // empty' <<< ${build_publish})
  add_git=$(jq -r '.add_git // empty' <<< ${build_publish})
  add_git_issue_config_file=$(jq -r '.add_git_issue_config_file // empty' <<< ${build_publish})
  env_include=$(jq -r '.env_include // "*"' <<< ${build_publish})
  env_exclude=$(jq -r '.env_exclude // "*password*;*secret*;*key*;*token*"' <<< ${build_publish})

  is_valid 'build_name' "${build_name}"

  # Add 'buildInfo.env.' prefix, otherwise any pattern that does not begins with '*' will not match.
  if [[ -n ${env_include} ]] ; then
    env_include="buildInfo.env.${env_include//;/;buildInfo.env.}"
  fi
  if [[ -n ${env_exclude} ]] ; then
    env_exclude="buildInfo.env.${env_exclude//;/;buildInfo.env.}"
  fi
  
  # If exist, read build_number from file
  build_number_file=${build_number_file:=${path_param}/build}
  if [[ -f "${destination}/${build_number_file}" ]]; then
    build_number=$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' "${destination}/${build_number_file}")
  fi  
  build_number="${build_number:-$BUILD_ID}"

  build_url="$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"

  # Collecting git revision and remote url...
  if [[ -n "${add_git}" ]] && [[ -d "${destination}/${add_git}" ]]; then

    if [[ -n "${add_git_issue_config_file}" ]] && [[ -e "${destination}/${add_git}/${add_git_issue_config_file}" ]]; then
      
      jfrog rt bag --config "${destination}/${add_git_issue_config_file}" "${build_name}" "${build_number}" "${destination}/${add_git}"
    else
      jfrog rt bag "${build_name}" "${build_number}" "${destination}/${add_git}"
    fi
  fi

  # Collecting environment variables...
  jfrog rt build-collect-env "$build_name" "$build_number"

  # Upload artifact...
  pushd "${destination}/${path_param}"
    echo "Upload artifact..."
    jfrog rt upload "*" "$repository_id/$group_id_path/$artifact_id/$version/" --flat=false  --exclude-patterns="version;build;_remote.repositories;*.git*" --build-name="$build_name" --build-number="$build_number"
  popd

  echo "Publish build-info..."
  jfrog rt build-publish "$build_name" "$build_number" --build-url="$build_url" --env-include="$env_include" --env-exclude="$env_exclude"


fi

metadata_files="$(echo "${metadata_files}" | jq '[to_entries[]|{name: "file_\(.key)", value}]')"
metadata_folder=$(folder_metadata "${payload}" "${destination}")
echo "\"${version}\"" | jq "{version: {ref: .}, metadata: $(echo ${metadata_folder} | jq ". + ${metadata_files}")}" >&3
exit 0